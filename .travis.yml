env:
  global:
    # tag
    - DEPLOY_RELEASE="0.19_pre"
    # stable or dev
    - RELEASE_TYPE="dev"
    ##
    - FREECAD_RELEASE="0.18"
    # - DEPLOY_RELEASE=${DEPLOY_RELEASE:-$FREECAD_RELEASE}
    - OSX_PORTS_CACHE=${OSX_PORTS_CACHE:-FreeCAD/FreeCAD-ports-cache}
    - DEPLOY_REPO=${DEPLOY_REPO:-FreeCAD/FreeCAD}
    - DEPLOY=${DEPLOY:-0}

os:
  - linux
  - osx

compiler: gcc
language: cpp

before_install:
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      sudo apt-get update -qq && sudo apt-get install -y desktop-file-utils jq zsync p7zip-full;
      curl -LO "https://github.com/stedolan/jq/releases/download/jq-1.5/jq-linux64";
      chmod +x jq-linux64 && sudo mv jq-linux64 $(which jq);
    fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then brew install jq p7zip; fi

install:
  - eval "$(curl -fsSL "https://raw.githubusercontent.com/${OSX_PORTS_CACHE}/v${FREECAD_RELEASE}/travis-helpers.sh")"
  - if [ "$TRAVIS_OS_NAME" == "linux" ]; then
      curl -LO https://raw.githubusercontent.com/AppImage/AppImages/master/pkg2appimage;
      wget "https://github.com/AppImage/AppImageKit/releases/download/continuous/appimagetool-x86_64.AppImage";
      chmod a+x appimagetool-x86_64.AppImage;
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh;
      bash miniconda.sh -b -p $HOME/miniconda;
      export PATH="$HOME/miniconda/bin:$PATH";
    fi
  - if [ "$TRAVIS_OS_NAME" == "osx" ]; then
      wget https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh -O miniconda.sh;
      bash miniconda.sh -b -p $HOME/miniconda;
      export PATH="$HOME/miniconda/bin:$PATH";
    fi
  - hash -r
  - conda config --set always_yes yes --set changeps1 no
  - conda update -q conda
  - if [ "$RELEASE_TYPE" == "stable" ]; then
      wget "https://github.com/FreeCAD/FreeCAD/releases/download/0.18/FreeCAD.0_18.Offline.Doc.7z";
      7z x FreeCAD.0_18.Offline.Doc.7z;
    fi

script:
  - if [ "$TRAVIS_OS_NAME" == "linux" -a "$RELEASE_TYPE" == "stable" ]; then
      cd conda/linux;
      bash ./conda_stable.sh;
      cd ..;
    fi
  - if [ "$TRAVIS_OS_NAME" == "linux" -a "$RELEASE_TYPE" == "dev" ]; then
      cd conda/linux;
      bash ./conda_dev.sh;
      cd ..;
    fi
  - if [ "$TRAVIS_OS_NAME" == "osx" -a "$RELEASE_TYPE" == "stable" ]; then
      cd conda/osx;
      bash ./conda_stable.sh;
      cd ..;
    fi
  - if [ "$TRAVIS_OS_NAME" == "osx" -a "$RELEASE_TYPE" == "dev" ]; then
      cd conda/osx;
      bash ./conda_dev.sh;
      cd ..;
    fi

after_success:
  - |
    if [ "$TRAVIS_OS_NAME" == "linux" -a "${DEPLOY}" == "1" ]; then
      export deployContext=$(create_helper_context repo=${DEPLOY_REPO} auth_token=${GH_TOKEN} release=${DEPLOY_RELEASE})
      gitHub_prune_assets_for_release_named $deployContext ".AppImage" 0
      export DEPLOYMENT_ARCHIVE=$(ls linux/*.AppImage)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
      export DEPLOYMENT_ARCHIVE=$(ls linux/*.AppImage.zsync)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
    fi
  - |
    if [ "$TRAVIS_OS_NAME" == "osx" -a "${DEPLOY}" == "1" ]; then
      export deployContext=$(create_helper_context repo=${DEPLOY_REPO} auth_token=${GH_TOKEN} release=${DEPLOY_RELEASE})
      gitHub_prune_assets_for_release_named $deployContext ".dmg" 0
      export DEPLOYMENT_ARCHIVE=$(ls osx/*.dmg)
      gitHub_deploy_asset_to_release_named $deployContext ${DEPLOYMENT_ARCHIVE}
    fi
