name: freecad_bundle
on:
  push:
    branches:
      - "*"
  pull_request:
    branches:
      - main
  workflow_dispatch:

jobs:
  build-bundles:
    runs-on: ${{ matrix.os }}
    strategy:
      max-parallel: 4
      fail-fast: false
      matrix:
        os: [windows-latest, macos-latest, macos-13, ubuntu-latest, ubuntu-22.04-arm]
        tag: ["weekly-builds"]
        include:
          - os: windows-latest
            bundle_dir: conda/win
            asset_pattern: AstoCAD_.*Windows-x86_64
          - os: macos-13
            bundle_dir: conda/osx
            asset_pattern: AstoCAD_.*macOS-x86_64
          - os: macos-latest
            bundle_dir: conda/osx
            asset_pattern: AstoCAD_.*macOS-arm64
          - os: ubuntu-latest
            bundle_dir: conda/linux
            asset_pattern: AstoCAD_.*Linux-x86_64
          - os: ubuntu-22.04-arm
            bundle_dir: conda/linux
            asset_pattern: AstoCAD_.*Linux-aarch64

    steps:
      - if: matrix.os == 'windows-latest'
        name: msys2
        uses: msys2/setup-msys2@v2

      - uses: actions/checkout@v4
        name: Checkout

      - uses: conda-incubator/setup-miniconda@v3
        with:
          auto-update-conda: true
          use-mamba: true
          miniforge-variant: Miniforge3
          conda-remove-defaults: "true"

      - if: matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-22.04-arm'
        name: update linux
        run: |
          sudo apt-get update -qq && sudo apt-get install -y desktop-file-utils appstream zsync curl;
          curl -LO https://github.com/AppImage/appimagetool/releases/download/continuous/appimagetool-$(uname -m).AppImage;
          chmod a+x appimagetool-$(uname -m).AppImage;

      - if: github.event_name != 'pull_request' && (matrix.os == 'ubuntu-latest' || matrix.os == 'ubuntu-22.04-arm')
        name: import GPG key
        run: echo "$GPG_KEY" | base64 --decode | gpg --batch --import
        env:
          GPG_KEY: ${{ secrets.GPG_KEY }}

      - if: matrix.os != 'windows-latest'
        name: install conda dependencies for unix
        run: |
          mamba install p7zip sed curl -y -c conda-forge;

      - if: matrix.os == 'windows-latest'
        name: install conda dependencies for windows
        run: |
          mamba install curl -y -c conda-forge;

      - if: matrix.os != 'windows-latest'
        name: create unix bundle
        run: "bash ./create_bundle.sh"
        working-directory: ${{ matrix.bundle_dir}}
        env:
            DEPLOY_RELEASE: ${{ matrix.tag }}
            GPG_KEY_ID: ${{ secrets.GPG_KEY_ID }}
            APPIMAGETOOL_SIGN_PASSPHRASE: ${{ secrets.APPIMAGETOOL_SIGN_PASSPHRASE }}

      - if: matrix.os == 'windows-latest'
        name: create windows bundle
        shell: cmd
        run: "call create_bundle.bat"
        working-directory: ${{ matrix.bundle_dir}}
        env:
            DEPLOY_RELEASE: ${{ matrix.tag }}

      - if: (github.event_name != 'pull_request')
        name: Upload binaries to AstoCAD server
        working-directory: ${{ matrix.bundle_dir }}
        env:
          FTP_HOST: ${{ secrets.FTP_HOST }}
          FTP_USER: ${{ secrets.FTP_USER }}
          FTP_PASSWORD: ${{ secrets.FTP_PASSWORD }}
        shell: bash
        run: |
          # Install lftp for each OS
          if [[ "$RUNNER_OS" == "Linux" ]]; then
            sudo apt-get update -qq && sudo apt-get install -y lftp;
            FILE_PATTERN="AstoCAD_*.AppImage AstoCAD_*.txt";
          elif [[ "$RUNNER_OS" == "macOS" ]]; then
            brew install lftp;
            FILE_PATTERN="AstoCAD_*.dmg AstoCAD_*.txt";
          elif [[ "$RUNNER_OS" == "Windows" ]]; then
           # Find and upload files individually
           find . -maxdepth 1 -name 'AstoCAD_*.7z' -o -name 'AstoCAD_*.txt' | while read -r file; do
             filename=$(basename "$file")
             echo "Uploading $filename"
             powershell -Command "
               try {
                 \$ftpUri = 'ftp://${{ secrets.FTP_HOST }}/www/builds/$filename'
                 \$ftpRequest = [System.Net.FtpWebRequest]::Create(\$ftpUri)
                 \$ftpRequest.Credentials = New-Object System.Net.NetworkCredential('${{ secrets.FTP_USER }}', '${{ secrets.FTP_PASSWORD }}')
                 \$ftpRequest.Method = [System.Net.WebRequestMethods+Ftp]::UploadFile
                 \$ftpRequest.UseBinary = \$true
                 \$ftpRequest.KeepAlive = \$false
 
                 \$fileStream = [System.IO.File]::OpenRead('$file')
                 \$ftpStream = \$ftpRequest.GetRequestStream()
                 \$fileStream.CopyTo(\$ftpStream)
                 Write-Host 'Successfully uploaded $filename'
               } finally {
                 if (\$null -ne \$fileStream) { \$fileStream.Close() }
                 if (\$null -ne \$ftpStream) { \$ftpStream.Close() }
               }
             " || exit 1
           done
           exit 0
          fi

          if [[ "$RUNNER_OS" == "Linux" || "$RUNNER_OS" == "macOS" ]]; then
            lftp -e "
            open $FTP_HOST;
            user $FTP_USER $FTP_PASSWORD;
            cd /www/builds/;
            mput $FILE_PATTERN;
            bye
            "
          fi
